<?php
// Configuración del sistema OptiCAP
class SystemSettings {
    // Configuración de la aplicación
    const APP_NAME = 'OptiCAP';
    const APP_VERSION = '1.0.0';
    const APP_DEBUG = true;
    
    // Configuración de base de datos
    const DB_HOST = 'localhost';
    const DB_NAME = 'opticap';
    const DB_USER = 'root';
    const DB_PASS = '';
    const DB_CHARSET = 'utf8mb4';
    
    // Configuración de seguridad
    const MAX_LOGIN_ATTEMPTS = 4;
    const SESSION_TIMEOUT = 3600; // 1 hora en segundos
    const PASSWORD_MIN_LENGTH = 8;
    
    // Configuración de uploads
    const UPLOAD_MAX_SIZE = 5 * 1024 * 1024; // 5MB
    const ALLOWED_IMAGE_TYPES = ['png', 'jpg', 'jpeg', 'gif', 'svg'];
    const UPLOAD_DIR = '../assets/uploads/';
    
    // Configuración de paginación
    const ITEMS_PER_PAGE = 20;
    const ITEMS_PER_PAGE_OPTIONS = [10, 20, 50, 100];
    
    // Configuración de notificaciones
    const NOTIFICATION_DAYS_BEFORE_DUE = 3;
    const EMAIL_ENABLED = false;
    
    // Configuración de reportes
    const REPORT_MAX_RECORDS = 1000;
    const EXPORT_MAX_RECORDS = 5000;
    
    // Rutas del sistema
    const BASE_URL = '/opticap/';
    const ASSETS_URL = '/opticap/assets/';
    const LOGIN_URL = '/opticap/login.php';
    
    /**
     * Obtener configuración del sistema desde la base de datos
     */
    public static function getSystemConfig() {
        try {
            $database = new Database();
            $db = $database->getConnection();
            
            $query = "SELECT * FROM configuraciones_sistema ORDER BY id DESC LIMIT 1";
            $stmt = $db->prepare($query);
            $stmt->execute();
            
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (Exception $e) {
            // Retornar configuración por defecto si hay error
            return [
                'nombre_sistema' => self::APP_NAME,
                'logo_url' => null,
                'from_email' => 'sistema@opticap.com',
                'from_name' => 'Sistema OptiCAP',
                'email_activo' => 0
            ];
        }
    }
    
    /**
     * Validar tipo de archivo
     */
    public static function isValidFileType($filename) {
        $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        return in_array($extension, self::ALLOWED_IMAGE_TYPES);
    }
    
    /**
     * Validar tamaño de archivo
     */
    public static function isValidFileSize($size) {
        return $size <= self::UPLOAD_MAX_SIZE;
    }
    
    /**
     * Generar nombre único para archivo
     */
    public static function generateFileName($originalName) {
        $extension = pathinfo($originalName, PATHINFO_EXTENSION);
        return uniqid() . '_' . time() . '.' . $extension;
    }
    
    /**
     * Obtener URL base
     */
    public static function getBaseUrl() {
        if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
            $url = "https://";
        } else {
            $url = "http://";
        }
        $url .= $_SERVER['HTTP_HOST'] . self::BASE_URL;
        return $url;
    }
    
    /**
     * Obtener URL de assets
     */
    public static function getAssetsUrl() {
        return self::getBaseUrl() . 'assets/';
    }
    
    /**
     * Redireccionar con mensaje
     */
    public static function redirect($url, $message = null, $type = 'success') {
        if ($message) {
            $_SESSION['flash_message'] = $message;
            $_SESSION['flash_type'] = $type;
        }
        header("Location: " . $url);
        exit();
    }
    
    /**
     * Mostrar mensaje flash
     */
    public static function displayFlashMessage() {
        if (isset($_SESSION['flash_message'])) {
            $type = $_SESSION['flash_type'] ?? 'info';
            $message = $_SESSION['flash_message'];
            
            echo '<div class="alert alert-' . htmlspecialchars($type) . ' alert-dismissible fade show" role="alert">';
            echo htmlspecialchars($message);
            echo '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>';
            echo '</div>';
            
            unset($_SESSION['flash_message']);
            unset($_SESSION['flash_type']);
        }
    }
    
    /**
     * Registrar log del sistema
     */
    public static function log($message, $level = 'INFO', $user_id = null) {
        if (!self::APP_DEBUG) return;
        
        $log_dir = __DIR__ . '/../logs/';
        if (!is_dir($log_dir)) {
            mkdir($log_dir, 0755, true);
        }
        
        $log_file = $log_dir . 'system_' . date('Y-m-d') . '.log';
        $timestamp = date('Y-m-d H:i:s');
        $user_info = $user_id ? " [USER:$user_id]" : '';
        
        $log_entry = "[$timestamp] [$level]$user_info: $message" . PHP_EOL;
        
        file_put_contents($log_file, $log_entry, FILE_APPEND | LOCK_EX);
    }
    
    /**
     * Validar email
     */
    public static function isValidEmail($email) {
        return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
    }
    
    /**
     * Sanitizar entrada
     */
    public static function sanitize($input) {
        if (is_array($input)) {
            return array_map([self::class, 'sanitize'], $input);
        }
        
        return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
    }
    
    /**
     * Generar token CSRF
     */
    public static function generateCsrfToken() {
        if (empty($_SESSION['csrf_token'])) {
            $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
        }
        return $_SESSION['csrf_token'];
    }
    
    /**
     * Validar token CSRF
     */
    public static function validateCsrfToken($token) {
        return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
    }
    
    /**
     * Obtener roles permitidos para una acción
     */
    public static function getAllowedRoles($action) {
        $roles = [
            'view_dashboard' => ['usuario', 'super_usuario', 'supervisor', 'administrador'],
            'create_requirement' => ['usuario', 'super_usuario', 'supervisor'],
            'manage_users' => ['supervisor', 'administrador'],
            'manage_system' => ['administrador'],
            'view_reports' => ['supervisor', 'administrador'],
            'manage_processes' => ['super_usuario', 'supervisor', 'administrador']
        ];
        
        return $roles[$action] ?? [];
    }
    
    /**
     * Verificar si un rol tiene permiso para una acción
     */
    public static function hasPermission($role, $action) {
        $allowed_roles = self::getAllowedRoles($action);
        return in_array($role, $allowed_roles);
    }
}

// Inicializar configuración
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Manejar errores
if (SystemSettings::APP_DEBUG) {
    error_reporting(E_ALL);
    ini_set('display_errors', 1);
} else {
    error_reporting(0);
    ini_set('display_errors', 0);
}

// Configurar zona horaria
date_default_timezone_set('America/Lima');

// Headers de seguridad
header('X-Frame-Options: DENY');
header('X-Content-Type-Options: nosniff');
header('X-XSS-Protection: 1; mode=block');

// Configurar límites de memoria y tiempo de ejecución
ini_set('memory_limit', '256M');
ini_set('max_execution_time', 300);
?>